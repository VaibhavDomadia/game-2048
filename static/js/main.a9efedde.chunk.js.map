{"version":3,"sources":["Icons/githubicon.svg","Icons/menu.svg","Icons/close.svg","Icons/classic.svg","Icons/reverse.svg","Icons/classicblue.svg","Icons/reverseblue.svg","Icons/arrowup.svg","Icons/arrowdown.svg","Icons/arrowleft.svg","Icons/arrowright.svg","logo.svg","Components/Header/header.js","Components/GamePlayOptions/gameplayoptions.js","Components/Cell/cell.js","Components/Row/row.js","Components/Board/board.js","Components/ScoreBoard/scoreboard.js","Components/RestartButton/restartbutton.js","Components/GameArena/gamearena.js","Components/Classic2048/classic2048.js","Components/Reverse2048/reverse2048.js","Components/NavigationDrawer/navigationdrawer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","this","isDrawerOpen","toggleNavigationDrawer","icon","MenuIcon","CloseIcon","className","onClick","src","alt","href","title","GitHubIcon","React","Component","GamePlayOptions","ArrowUp","ArrowLeft","ArrowDown","ArrowRight","Cell","value","backgroundColor","style","boxShadow","Row","cellValues","map","cell","index","key","Board","board","gameWon","gameOver","row","ScoreBoard","score","RestartButton","restartGame","GameArena","getEmptyBoard","bind","initializeBoard","move","document","onkeyup","moveLeft","moveRight","moveUp","moveDown","shrinkArray","isGameOver","isGameWon","state","Array","i","fill","Math","floor","random","column","generateRandomCellValue","array","shrinkedArray","addScore","length","push","getMergedCellValue","getScoreFromMerging","setState","prevousState","event","direction","keyCode","movementHappened","updatedBoard","slidedRow","flag","j","shrinkedRow","emptyCellNumber","BOARD_SIZE","slidedColumn","shrinkedColumn","positionToFill","gameWonCellValue","Classic2048","valueToBeMerged","Reverse2048","NavigationDrawer","currentGameName","changeCurrentGame","left","ClassicBlueIcon","ClassicIcon","ReverseBlueIcon","ReverseIcon","App","newGame","currentGame","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a9efedde.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/githubicon.cfb247e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/menu.2b0d2d37.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.d0532851.svg\";","module.exports = __webpack_public_path__ + \"static/media/classic.dc7ad66c.svg\";","module.exports = __webpack_public_path__ + \"static/media/reverse.9e3f98ec.svg\";","module.exports = __webpack_public_path__ + \"static/media/classicblue.4de5964d.svg\";","module.exports = __webpack_public_path__ + \"static/media/reverseblue.6125f68d.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrowup.984a6c88.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrowdown.0bda22ab.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrowleft.fc7c38a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrowright.17866ce5.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './header.css'\r\nimport GitHubIcon from '../../Icons/githubicon.svg';\r\nimport MenuIcon from '../../Icons/menu.svg';\r\nimport CloseIcon from '../../Icons/close.svg';\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {isDrawerOpen, toggleNavigationDrawer} = this.props;\r\n\r\n        let icon = MenuIcon;\r\n        if(isDrawerOpen) {\r\n            icon = CloseIcon;\r\n        }\r\n\r\n        return (\r\n            <div className = \"header\">\r\n                <div className = \"menuIcon\" onClick = {toggleNavigationDrawer}>\r\n                    <img src = {icon} alt = \"Menu Icon\"></img>\r\n                </div>\r\n                <h2 className = \"title\">2048</h2>\r\n                <a className = \"githubicon\" href = \"https://github.com/VaibhavDomadia/game-2048\" title = \"Link to the Repository\">\r\n                    <img src = {GitHubIcon} alt = \"Github Link to the Project\"></img>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport ArrowUp from '../../Icons/arrowup.svg';\r\nimport ArrowDown from '../../Icons/arrowdown.svg';\r\nimport ArrowLeft from '../../Icons/arrowleft.svg';\r\nimport ArrowRight from '../../Icons/arrowright.svg';\r\nimport './gameplayoptions.css';\r\n\r\nclass GamePlayOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"gamePlayOptions\">\r\n                <h2 className = \"gamePlayMessage\">Use Arrow Keys to Play</h2>\r\n                <div className = \"arrowKeysContainer\">\r\n                    <div className = \"arrowKey arrowUp\">\r\n                        <img src = {ArrowUp} alt = \"Arrow Up\"></img>\r\n                    </div>\r\n                    <div className = \"arrowKey\">\r\n                        <img src = {ArrowLeft} alt = \"Arrow Left\"></img>\r\n                    </div>\r\n                    <div className = \"arrowKey\">\r\n                        <img src = {ArrowDown} alt = \"Arrow Down\"></img>\r\n                    </div>\r\n                    <div className = \"arrowKey\">\r\n                        <img src = {ArrowRight} alt = \"Arrow Right\"></img>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GamePlayOptions;","import React from 'react';\r\nimport './cell.css';\r\n\r\nclass Cell extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {value} = this.props;\r\n\r\n        let backgroundColor = '#ffffff';\r\n\r\n        switch(value) {\r\n            case 2:\r\n                backgroundColor = '#32a852';\r\n                break;\r\n            case 4:\r\n                backgroundColor = '#3ccfcf';\r\n                break;\r\n            case 8:\r\n                backgroundColor = '#ea4335';\r\n                break;\r\n            case 16:\r\n                backgroundColor = '#fbbc05';\r\n                break;\r\n            case 32:\r\n                backgroundColor = '#1389fd';\r\n                break;\r\n            case 64:\r\n                backgroundColor = '#7a58fc';\r\n                break;\r\n            case 128:\r\n                backgroundColor = '#3ddc84';\r\n                break;\r\n            case 256:\r\n                backgroundColor = '#f47100';\r\n                break;\r\n            case 512:\r\n                backgroundColor = '#ee6e73';\r\n                break;\r\n            case 1024:\r\n                backgroundColor = '#10536e';\r\n                break;\r\n            case 2048:\r\n                backgroundColor = '#404040';\r\n                break;\r\n            default:\r\n                backgroundColor = '#ffffff';\r\n        }\r\n\r\n        let style = {\r\n            backgroundColor\r\n        }\r\n\r\n        if(value != 0) {\r\n            style.boxShadow = \"2px 2px 24px rgba(0, 0, 0, 0.2)\";\r\n        }\r\n\r\n        return (\r\n            <div className = \"cell\" style = {style}>{value == 0 ? \"\" : value}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport './row.css';\r\nimport Cell from '../Cell/cell'\r\n\r\nclass Row extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {cellValues} = this.props;\r\n\r\n        return (\r\n            <div className = \"row\">\r\n                {\r\n                    cellValues.map((cell, index) => <Cell key = {index} value = {cell}/>)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport Row from '../Row/row';\r\nimport './board.css';\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {board, gameWon, gameOver} = this.props;\r\n\r\n        return (\r\n            <div className = \"boardContainer\">\r\n                {gameWon && <div className = \"gameWonBanner\">You Won!</div>}\r\n                {!gameWon && gameOver && <div className = \"gameOverBanner\">Game Over!</div>}\r\n                <div className = \"board\">\r\n                    {\r\n                        board.map((row, index) => <Row key = {index} cellValues = {row}/>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport './scoreboard.css';\r\n\r\nclass ScoreBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"scoreBoard\">\r\n                <div className = \"scoreTitle\">Score:</div>\r\n                <div className = \"score\">{this.props.score}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoreBoard;","import React from 'react';\r\nimport './restartbutton.css';\r\n\r\nclass RestartButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button className = \"restartButton\" onClick = {this.props.restartGame}>Restart</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RestartButton;","import React from 'react';\r\nimport GamePlayOptions from '../GamePlayOptions/gameplayoptions'\r\nimport Board from '../Board/board'\r\nimport ScoreBoard from '../ScoreBoard/scoreboard'\r\nimport RestartButton from '../RestartButton/restartbutton'\r\nimport './gamearena.css';\r\n\r\nconst BOARD_SIZE = 4;\r\n\r\nclass GameArena extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.getEmptyBoard = this.getEmptyBoard.bind(this);\r\n        this.initializeBoard = this.initializeBoard.bind(this);\r\n        this.move = this.move.bind(this);\r\n        document.onkeyup = this.move;\r\n        this.moveLeft = this.moveLeft.bind(this);\r\n        this.moveRight = this.moveRight.bind(this);\r\n        this.moveUp = this.moveUp.bind(this);\r\n        this.moveDown = this.moveDown.bind(this);\r\n        this.shrinkArray = this.shrinkArray.bind(this);\r\n        this.restartGame = this.restartGame.bind(this);\r\n        this.isGameOver = this.isGameOver.bind(this);\r\n        this.isGameWon = this.isGameWon.bind(this);\r\n\r\n        this.state = {\r\n            board: this.initializeBoard(),\r\n            gameOver: false,\r\n            gameWon: false,\r\n            score: 0\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * This function created an empty board with values filled with zero\r\n     * \r\n     * @returns an empty 2D board\r\n     */\r\n    getEmptyBoard() {\r\n        let board = new Array(BOARD_SIZE);\r\n        for(let i = 0 ; i < BOARD_SIZE ; i++) {\r\n            board[i] = new Array(BOARD_SIZE).fill(0);\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    /**\r\n     * This funtion is used to create the initial state of the board.\r\n     * \r\n     * First it call getEmptyBoard() method to get initial board.\r\n     * \r\n     * Then it creates 2 random number using generateRandomCellValue() function\r\n     * and assign it to some random position/s in the board.\r\n     * \r\n     * @returns 2D array of values that represent the state of board.\r\n     */\r\n    initializeBoard() {\r\n        let board = this.getEmptyBoard();\r\n\r\n        let row = Math.floor(Math.random()*4);\r\n        let column = Math.floor(Math.random()*4);\r\n        board[row][column] = this.props.generateRandomCellValue();\r\n        \r\n        row = Math.floor(Math.random()*4);\r\n        column = Math.floor(Math.random()*4);\r\n        board[row][column] = this.props.generateRandomCellValue();\r\n\r\n        return board;\r\n    }\r\n\r\n    /**\r\n     * This function takes an array as input which basically represent a row or a column\r\n     * in the board and then shrinks it from left to right in a way that if two consecutive values \r\n     * are same then both are merged up by logic defined in getMergedCellValue() function and then\r\n     * assigned to the first value and second value is deleted.\r\n     * \r\n     * @param array The array which needs to be shrinked.\r\n     * \r\n     * @returns a shrinked form of the array passed as a parameter.\r\n     */\r\n    shrinkArray(array) {\r\n        let shrinkedArray = [];\r\n\r\n        let addScore = 0;\r\n        \r\n        for(let i=0 ; i<array.length ; i++) {\r\n            if(i+1 < array.length) {\r\n                if(array[i] == array[i+1]) {\r\n                    shrinkedArray.push(this.props.getMergedCellValue(array[i]));\r\n                    addScore += this.props.getScoreFromMerging(array[i]);\r\n                    i++;\r\n                }\r\n                else {\r\n                    shrinkedArray.push(array[i]);\r\n                }\r\n            }\r\n            else {\r\n                shrinkedArray.push(array[i]);\r\n            }\r\n        }\r\n\r\n        if(addScore != 0) {\r\n            this.setState((prevousState, props) => {\r\n                return {score: prevousState.score + addScore};\r\n            });\r\n        }\r\n\r\n        return shrinkedArray;\r\n    }\r\n\r\n    /**\r\n     * This function calls appropriate method based on the key pressed in the game.\r\n     * \r\n     * @param event recieves the event that was generated as a result of on key press on the game.\r\n     */\r\n    move(event) {\r\n        if(this.state.gameWon) {\r\n            return;\r\n        }\r\n\r\n        let direction = event.keyCode - 37;\r\n        if(0 <= direction && direction < 4) {\r\n            switch(direction) {\r\n                case 0:\r\n                    this.moveLeft();\r\n                    break;\r\n                case 1:\r\n                    this.moveUp();\r\n                    break;\r\n                case 2:\r\n                    this.moveRight();\r\n                    break;\r\n                case 3:\r\n                    this.moveDown();\r\n                    break;\r\n            }\r\n\r\n            const isGameOver = this.isGameOver();\r\n            if(isGameOver) {\r\n                this.setState({gameOver: true});\r\n            }\r\n\r\n            const isGameWon = this.isGameWon();\r\n            if(isGameWon) {\r\n                this.setState({gameWon: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function implements the left move method of the game\r\n     * \r\n     * It creates the new state of the board from the previous state in a way that\r\n     * all the cells are pushed on left side of the board and are shrinked accordingly.\r\n     */\r\n    moveLeft() {\r\n        const {board} = this.state;\r\n\r\n        let movementHappened = false;\r\n\r\n        let updatedBoard = this.getEmptyBoard();\r\n\r\n        for(let i=0 ; i<BOARD_SIZE ; i++) {\r\n            let slidedRow = [];\r\n\r\n            let flag = false;\r\n            for(let j=0 ; j<BOARD_SIZE ; j++) {\r\n                if(board[i][j] != 0) {\r\n                    slidedRow.push(board[i][j]);\r\n                    if(flag) {\r\n                        movementHappened = true;\r\n                    }\r\n                }\r\n                else {\r\n                    flag = true;\r\n                }\r\n            }\r\n\r\n            let shrinkedRow = this.shrinkArray(slidedRow);\r\n\r\n            if(shrinkedRow.length != slidedRow.length) {\r\n                movementHappened = true;\r\n            }\r\n\r\n            for(let j=0 ; j<BOARD_SIZE ; j++) {\r\n                if(j < shrinkedRow.length) {\r\n                    updatedBoard[i][j] = shrinkedRow[j];\r\n                }\r\n                else {\r\n                    updatedBoard[i][j] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(movementHappened) {\r\n            let emptyCellNumber = [];\r\n            for(let i=0 ; i<BOARD_SIZE ; i++) {\r\n                if(updatedBoard[i][BOARD_SIZE-1] == 0) {\r\n                    emptyCellNumber.push(i);\r\n                }\r\n            }\r\n\r\n            if(emptyCellNumber.length != 0) {\r\n                let index = Math.floor(Math.random()*emptyCellNumber.length);\r\n                let positionToFill = emptyCellNumber[index];\r\n                updatedBoard[positionToFill][BOARD_SIZE-1] = this.props.generateRandomCellValue();\r\n            }\r\n        }\r\n\r\n        this.setState({board: updatedBoard});\r\n    }\r\n\r\n    /**\r\n     * This function implements the right move method of the game\r\n     * \r\n     * It creates the new state of the board from the previous state in a way that\r\n     * all the cells are pushed on right side of the board and are shrinked accordingly.\r\n     */\r\n    moveRight() {\r\n        const {board} = this.state;\r\n\r\n        let movementHappened = false;\r\n\r\n        let updatedBoard = this.getEmptyBoard();\r\n\r\n        for(let i=0 ; i<BOARD_SIZE ; i++) {\r\n            let slidedRow = [];\r\n\r\n            let flag = false;\r\n            for(let j=BOARD_SIZE-1 ; j>=0 ; j--) {\r\n                if(board[i][j] != 0) {\r\n                    slidedRow.push(board[i][j]);\r\n                    if(flag) {\r\n                        movementHappened = true;\r\n                    }\r\n                }\r\n                else {\r\n                    flag = true;\r\n                }\r\n            }\r\n\r\n            let shrinkedRow = this.shrinkArray(slidedRow);\r\n\r\n            if(shrinkedRow.length != slidedRow.length) {\r\n                movementHappened = true;\r\n            }\r\n\r\n            for(let j=BOARD_SIZE-1 ; j>=0 ; j--) {\r\n                if(BOARD_SIZE-j-1 < shrinkedRow.length) {\r\n                    updatedBoard[i][j] = shrinkedRow[BOARD_SIZE-j-1];\r\n                }\r\n                else {\r\n                    updatedBoard[i][j] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(movementHappened) {\r\n            let emptyCellNumber = [];\r\n            for(let i=0 ; i<BOARD_SIZE ; i++) {\r\n                if(updatedBoard[i][0] == 0) {\r\n                    emptyCellNumber.push(i);\r\n                }\r\n            }\r\n\r\n            if(emptyCellNumber.length != 0) {\r\n                let index = Math.floor(Math.random()*emptyCellNumber.length);\r\n                let positionToFill = emptyCellNumber[index];\r\n                updatedBoard[positionToFill][0] = this.props.generateRandomCellValue();\r\n            }\r\n        }\r\n\r\n        this.setState({board: updatedBoard});\r\n    }\r\n\r\n    /**\r\n     * This function implements the up move method of the game\r\n     * \r\n     * It creates the new state of the board from the previous state in a way that\r\n     * all the cells are pushed upwards in the board and are shrinked accordingly.\r\n     */\r\n    moveUp() {\r\n        const {board} = this.state;\r\n\r\n        let movementHappened = false;\r\n\r\n        let updatedBoard = this.getEmptyBoard();\r\n\r\n        for(let j=0 ; j<BOARD_SIZE ; j++) {\r\n            let slidedColumn = [];\r\n\r\n            let flag = false;\r\n            for(let i=0 ; i<BOARD_SIZE ; i++) {\r\n                if(board[i][j] != 0) {\r\n                    slidedColumn.push(board[i][j]);\r\n                    if(flag) {\r\n                        movementHappened = true;\r\n                    }\r\n                }\r\n                else {\r\n                    flag = true;\r\n                }\r\n            }\r\n\r\n            let shrinkedColumn = this.shrinkArray(slidedColumn);\r\n\r\n            if(shrinkedColumn.length != slidedColumn.length) {\r\n                movementHappened = true;\r\n            }\r\n\r\n            for(let i=0 ; i<BOARD_SIZE ; i++) {\r\n                if(i < shrinkedColumn.length) {\r\n                    updatedBoard[i][j] = shrinkedColumn[i];\r\n                }\r\n                else {\r\n                    updatedBoard[i][j] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(movementHappened) {\r\n            let emptyCellNumber = [];\r\n            for(let j=0 ; j<BOARD_SIZE ; j++) {\r\n                if(updatedBoard[BOARD_SIZE-1][j] == 0) {\r\n                    emptyCellNumber.push(j);\r\n                }\r\n            }\r\n\r\n            if(emptyCellNumber.length != 0) {\r\n                let index = Math.floor(Math.random()*emptyCellNumber.length);\r\n                let positionToFill = emptyCellNumber[index];\r\n                updatedBoard[BOARD_SIZE-1][positionToFill] = this.props.generateRandomCellValue();\r\n            }\r\n        }\r\n\r\n        this.setState({board: updatedBoard});\r\n    }\r\n\r\n    /**\r\n     * This function implements the down move method of the game\r\n     * \r\n     * It creates the new state of the board from the previous state in a way that\r\n     * all the cells are pushed downwards in the board and are shrinked accordingly.\r\n     */\r\n    moveDown() {\r\n        const {board} = this.state;\r\n\r\n        let movementHappened = false;\r\n\r\n        let updatedBoard = this.getEmptyBoard();\r\n\r\n        for(let j=0 ; j<BOARD_SIZE ; j++) {\r\n            let slidedColumn = [];\r\n\r\n            let flag = false;\r\n            for(let i=BOARD_SIZE-1 ; i>=0 ; i--) {\r\n                if(board[i][j] != 0) {\r\n                    slidedColumn.push(board[i][j]);\r\n                    if(flag) {\r\n                        movementHappened = true;\r\n                    }\r\n                }\r\n                else {\r\n                    flag = true;\r\n                }\r\n            }\r\n\r\n            let shrinkedColumn = this.shrinkArray(slidedColumn);\r\n\r\n            if(shrinkedColumn.length != slidedColumn.length) {\r\n                movementHappened = true;\r\n            }\r\n\r\n            for(let i=BOARD_SIZE-1 ; i>=0 ; i--) {\r\n                if(BOARD_SIZE-i-1 < shrinkedColumn.length) {\r\n                    updatedBoard[i][j] = shrinkedColumn[BOARD_SIZE-i-1];\r\n                }\r\n                else {\r\n                    updatedBoard[i][j] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(movementHappened) {\r\n            let emptyCellNumber = [];\r\n            for(let j=0 ; j<BOARD_SIZE ; j++) {\r\n                if(updatedBoard[0][j] == 0) {\r\n                    emptyCellNumber.push(j);\r\n                }\r\n            }\r\n\r\n            if(emptyCellNumber.length != 0) {\r\n                let index = Math.floor(Math.random()*emptyCellNumber.length);\r\n                let positionToFill = emptyCellNumber[index];\r\n                updatedBoard[0][positionToFill] = this.props.generateRandomCellValue();\r\n            }\r\n        }\r\n\r\n        this.setState({board: updatedBoard});\r\n    }\r\n\r\n    /**\r\n     * This function restarts the game.\r\n     * \r\n     * It do so by calling initializeBoard() method and set to the current state of the board\r\n     * and setting gameWon and gameOver state to false.\r\n     */\r\n    restartGame() {\r\n        this.setState(\r\n            {\r\n                board: this.initializeBoard(),\r\n                gameOver: false,\r\n                gameWon: false,\r\n                score: 0\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * This function checks whether any move is possible or not.\r\n     * If not then it return true denoting that game is over.\r\n     * \r\n     * @returns true if game is over else return false.\r\n     */\r\n    isGameOver() {\r\n        const {board} = this.state;\r\n\r\n        for(let i=0 ; i<BOARD_SIZE ; i++) {\r\n            for(let j=0 ; j<BOARD_SIZE ; j++) {\r\n                if(board[i][j] == 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let i=0 ; i<BOARD_SIZE ; i++) {\r\n            for(let j=1 ; j<BOARD_SIZE ; j++) {\r\n                if(board[i][j] == board[i][j-1]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let j=0 ; j<BOARD_SIZE ; j++) {\r\n            for(let i=1 ; i<BOARD_SIZE ; i++) {\r\n                if(board[i][j] == board[i-1][j]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This function checks whether any cell value is equal to the value defined in gameWonCellValue or not.\r\n     * If yes then this function returns true denoting that game is completed.\r\n     * \r\n     * @returns true is game is completed else false;\r\n     */\r\n    isGameWon() {\r\n        const {board} = this.state;\r\n\r\n        for(let i=0 ; i<BOARD_SIZE ; i++) {\r\n            for(let j=0 ; j<BOARD_SIZE ; j++) {\r\n                if(board[i][j] == this.props.gameWonCellValue) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const {board, gameOver, gameWon, score} = this.state;\r\n        return (\r\n            <div className = \"gameArena\">\r\n                <GamePlayOptions/>\r\n                <Board gameWon = {gameWon} gameOver = {gameOver} board = {board}/>\r\n                <ScoreBoard score = {score}/>\r\n                <RestartButton restartGame = {this.restartGame}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameArena;","import React from 'react';\r\nimport GameArena from '../GameArena/gamearena';\r\n\r\nclass Classic2048 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.generateRandomCellValue = this.generateRandomCellValue.bind(this);\r\n        this.getMergedCellValue = this.getMergedCellValue.bind(this);\r\n        this.getScoreFromMerging = this.getScoreFromMerging.bind(this);\r\n    }\r\n\r\n    /**\r\n     * This function is used to generate either 2 or 4 using random number generator.\r\n     * \r\n     * @returns 2 or 4 as value.\r\n     */\r\n    generateRandomCellValue() {\r\n        let value = Math.floor(Math.random()*2) + 1;\r\n        return value * 2;\r\n    }\r\n\r\n    /**\r\n     * This function compute and returns value of the new cell based on the cells that are being merged.\r\n     * \r\n     * @param valueToBeMerged represent the value in both of the cell that is to be merged.\r\n     * \r\n     * @returns new cell value\r\n     */\r\n    getMergedCellValue(valueToBeMerged) {\r\n        return valueToBeMerged * 2;\r\n    }\r\n\r\n    /**\r\n     * This function returns the value that has been scored because of merging the cells.\r\n     * \r\n     * @param valueToBeMerged represent the value in both of the cell that is to be merged.\r\n     * \r\n     * @returns score to add to previous score.\r\n     */\r\n    getScoreFromMerging(valueToBeMerged) {\r\n        return valueToBeMerged * 2;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <GameArena gameWonCellValue = {2048} generateRandomCellValue = {this.generateRandomCellValue} getMergedCellValue = {this.getMergedCellValue} getScoreFromMerging = {this.getScoreFromMerging}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Classic2048;","import React from 'react';\r\nimport GameArena from '../GameArena/gamearena';\r\n\r\nclass Reverse2048 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.generateRandomCellValue = this.generateRandomCellValue.bind(this);\r\n        this.getMergedCellValue = this.getMergedCellValue.bind(this);\r\n        this.getScoreFromMerging = this.getScoreFromMerging.bind(this);\r\n    }\r\n\r\n    /**\r\n     * This function is used to generate either 1024 or 2048 using random number generator.\r\n     * \r\n     * @returns 1024 or 2048 as value.\r\n     */\r\n    generateRandomCellValue() {\r\n        let value = Math.floor(Math.random()*2) + 1;\r\n        return value * 1024;\r\n    }\r\n\r\n    /**\r\n     * This function compute and returns value of the new cell based on the cells that are being merged.\r\n     * \r\n     * @param valueToBeMerged represent the value in both of the cell that is to be merged.\r\n     * \r\n     * @returns new cell value\r\n     */\r\n    getMergedCellValue(valueToBeMerged) {\r\n        return valueToBeMerged / 2;\r\n    }\r\n\r\n    /**\r\n     * This function returns the value that has been scored because of merging the cells.\r\n     * \r\n     * @param valueToBeMerged represent the value in both of the cell that is to be merged.\r\n     * \r\n     * @returns score to add to previous score.\r\n     */\r\n    getScoreFromMerging(valueToBeMerged) {\r\n        return 4096 / valueToBeMerged * 2;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <GameArena gameWonCellValue = {2} generateRandomCellValue = {this.generateRandomCellValue} getMergedCellValue = {this.getMergedCellValue} getScoreFromMerging = {this.getScoreFromMerging}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Reverse2048;","import React from 'react';\r\nimport './navigationdrawer.css';\r\nimport ClassicIcon from '../../Icons/classic.svg';\r\nimport ReverseIcon from '../../Icons/reverse.svg';\r\nimport ClassicBlueIcon from '../../Icons/classicblue.svg';\r\nimport ReverseBlueIcon from '../../Icons/reverseblue.svg';\r\nimport Classic2048 from '../Classic2048/classic2048';\r\nimport Reverse2048 from '../Reverse2048/reverse2048';\r\n\r\nclass NavigationDrawer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {currentGameName, isDrawerOpen, changeCurrentGame} = this.props;\r\n        \r\n        let style = {};\r\n        if(isDrawerOpen) {\r\n            style.left = \"0%\";\r\n        }\r\n        else {\r\n            style.left = \"-25%\";\r\n        }\r\n        \r\n        return (\r\n            <div className = \"navigationDrawer\" style = {style}>\r\n                <h4 className = \"navigationItemGroupTitle\">VARIANTS</h4>\r\n                <div className = {currentGameName == 'CLASSIC2048' ? 'navigationItem active' : 'navigationItem'} onClick = {() => changeCurrentGame('CLASSIC2048')}>\r\n                    <img src = {currentGameName == 'CLASSIC2048' ? ClassicBlueIcon : ClassicIcon}></img>\r\n                    <div>Classic 2048</div>\r\n                </div>\r\n                <div className = {currentGameName == 'REVERSE2048' ? 'navigationItem active' : 'navigationItem'} onClick = {() => changeCurrentGame('REVERSE2048')}>\r\n                    <img src = {currentGameName == 'REVERSE2048' ? ReverseBlueIcon : ReverseIcon}></img>\r\n                    <div>Reverse 2048</div>\r\n                </div>                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavigationDrawer;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Header from './Components/Header/header';\r\nimport NavigationDrawer from './Components/NavigationDrawer/navigationdrawer';\r\nimport Classic2048 from './Components/Classic2048/classic2048';\r\nimport Reverse2048 from './Components/Reverse2048/reverse2048';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isDrawerOpen: false,\r\n            currentGameName: 'CLASSIC2048'\r\n        }\r\n\r\n        this.toggleNavigationDrawer = this.toggleNavigationDrawer.bind(this);\r\n        this.changeCurrentGame = this.changeCurrentGame.bind(this);\r\n    }\r\n\r\n    changeCurrentGame(newGame) {\r\n        this.setState({currentGameName: newGame});\r\n    }\r\n\r\n    toggleNavigationDrawer() {\r\n        this.setState((prevousState, props) => {\r\n            return {isDrawerOpen: !prevousState.isDrawerOpen};\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let currentGame;\r\n        switch(this.state.currentGameName) {\r\n            case 'CLASSIC2048':\r\n                currentGame = <Classic2048/>\r\n                break;\r\n            case 'REVERSE2048':\r\n                currentGame = <Reverse2048/>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Header isDrawerOpen = {this.state.isDrawerOpen} toggleNavigationDrawer = {this.toggleNavigationDrawer}/>\r\n                <NavigationDrawer currentGameName = {this.state.currentGameName} isDrawerOpen = {this.state.isDrawerOpen} changeCurrentGame = {this.changeCurrentGame}/>\r\n                {currentGame}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}